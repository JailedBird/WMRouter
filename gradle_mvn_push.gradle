apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP


def getPropertyFromLocalProperties(key) {
    File file = project.rootProject.file('local.properties');
    //兼容WmPlugin的发布
    if(!file.exists()){
        file = project.rootProject.file('../local.properties');
    }
    if (file.exists()) {
        Properties properties = new Properties()
        properties.load(file.newDataInputStream())
        return properties.getProperty(key)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def user = getPropertyFromLocalProperties("NEXUS_USERNAME")
            def password = getPropertyFromLocalProperties("NEXUS_PASSWORD")

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: user, password: password)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: user, password: password)
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    connection POM_SCM_URL
                    developerConnection POM_SCM_CONNECTION
                    url POM_URL
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}

afterEvaluate { project ->
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
        artifacts {
            archives androidSourcesJar
        }
    } else {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
        artifacts {
            archives javadocJar, sourcesJar
        }
    }
}

signing {
    sign configurations.archives
}